name: Build and Release (Windows + Linux + macOS Standalone)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.compare.outputs.greater }}
      version: ${{ steps.read_version.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get latest release tag
        id: latest
        env:
          TOKEN: ${{ github.token }}
        run: |
          set -e
          LATEST_TAG=$(curl -s -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // empty')
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then LATEST_TAG="0.0.0"; fi
          LATEST_VERSION=$(printf "%s" "$LATEST_TAG" | sed -E 's/^[^0-9]*//')
          echo "LATEST_TAG=$LATEST_TAG"           >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION"   >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION"

      - name: Read version.txt
        id: read_version
        run: |
          set -e
          [ -f version.txt ] || { echo "version.txt introuvable à la racine"; exit 1; }
          RAW_VERSION=$(head -n1 version.txt | tr -d '\r' | xargs)
          [ -n "$RAW_VERSION" ] || { echo "version.txt est vide"; exit 1; }
          VERSION=$(printf "%s" "$RAW_VERSION" | sed -E 's/^[^0-9]*//')
          echo "VERSION=$VERSION"         >> $GITHUB_ENV
          echo "version=$VERSION"         >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"

      - name: Compare versions
        id: compare
        run: |
          echo "Comparaison: NEW=${{ env.VERSION }} ; LATEST=${{ env.LATEST_VERSION }}"
          if dpkg --compare-versions "${{ env.VERSION }}" gt "${{ env.LATEST_VERSION }}"; then
            echo "greater=true"  >> $GITHUB_OUTPUT
            echo "GREATER=true"  >> $GITHUB_ENV
            echo "Nouvelle version détectée"
          else
            echo "greater=false" >> $GITHUB_OUTPUT
            echo "GREATER=false" >> $GITHUB_ENV
            echo "Pas de bump de version"
          fi

      - name: Compute tag
        id: tag
        run: |
          echo "tag=v${{ env.VERSION }}" >> $GITHUB_OUTPUT

  Windows_Standalone_Build:
    if: ${{ needs.build.outputs.should_release == 'true' }}
    runs-on: windows-latest
    needs: [ build ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install deps (PyInstaller + project)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { python -m pip install -r requirements.txt }
          python -m pip install "pyinstaller>=6.0"
          pyinstaller --version

      - name: Create entrypoints (CLI & GUI)
        shell: pwsh
        run: |
          Set-Content entry_cli.py @"
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          "@
          Set-Content entry_gui.py @"
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          "@

      - name: Prepare Windows resources (icon + version file + manifest)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "build-res" | Out-Null

          # Cherche une icône dans scanner\assets, puis fallback root
          $icoCandidates = @(
            "scanner\assets\IoC-Scanner_lighter.ico",
            "scanner\assets\IoC-Scanner.ico",
            "scanner\assets\icon.ico",
            "icon.ico"
          )
          $ico = $null; foreach ($p in $icoCandidates) { if (Test-Path $p) { $ico = $p; break } }
          if (-not $ico) { Write-Error "Aucune icône .ico trouvée (scanner\assets ou racine)"; exit 1 }
          "WIN_ICO=$ico" >> $env:GITHUB_ENV

          $ver = "${{ needs.build.outputs.version }}"; if ([string]::IsNullOrWhiteSpace($ver)) { $ver = "0.0.0" }

          # VSVersionInfo pour --version-file (placeholders remplacés ensuite)
          Set-Content build-res\file_version.txt @'
          # UTF-8
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=({{VER}}, 0), prodvers=({{VER}}, 0),
              mask=0x3f, flags=0x0, OS=0x40004, fileType=0x1, subtype=0x0, date=(0, 0)
            ),
            kids=[
              StringFileInfo([StringTable('040904B0', [
                StringStruct('CompanyName', 'IoC-Scanner'),
                StringStruct('FileDescription', 'IoC-Scanner'),
                StringStruct('FileVersion', '{{VERSTR}}'),
                StringStruct('ProductName', 'IoC-Scanner'),
                StringStruct('ProductVersion', '{{VERSTR}}')
              ])]),
              VarFileInfo([VarStruct('Translation', [1033, 1200])])
            ]
          )
          '@

          (Get-Content build-res\file_version.txt -Raw).
            Replace('{{VER}}', ($ver -replace '\.', ', ')).
            Replace('{{VERSTR}}', $ver) | Set-Content build-res\file_version.txt

          # Manifest XML valide (asInvoker + compat + Common-Controls v6)
          Set-Content build-res\app.manifest @'
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
              <security>
                <requestedPrivileges>
                  <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
                </requestedPrivileges>
              </security>
            </trustInfo>
            <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
              <application>
                <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
              </application>
            </compatibility>
            <dependency>
              <dependentAssembly>
                <assemblyIdentity type="win32"
                  name="Microsoft.Windows.Common-Controls"
                  version="6.0.0.0"
                  processorArchitecture="*"
                  publicKeyToken="6595b64144ccf1df"
                  language="*"/>
              </dependentAssembly>
            </dependency>
          </assembly>
          '@

      - name: Build Windows Standalone (CLI)
        shell: pwsh
        run: |
          $version = "${{ needs.build.outputs.version }}"; if ([string]::IsNullOrWhiteSpace($version)) { $version = "0.0.0" }
          $exeName = "IoCScanner_CLI_Windows_v$version"
          "WINDOWS_CLI_EXE=$exeName.exe" >> $env:GITHUB_ENV
          $ico = "${{ env.WIN_ICO }}"

          $args = @(
            "--noconfirm","--onefile","--clean","--noupx",
            "--console",
            "--name",$exeName,
            "--icon",$ico,
            "--add-data",("$ico;.")
          )

          pyinstaller @args --version-file "build-res/file_version.txt" --manifest "build-res/app.manifest" entry_cli.py
          if (!(Test-Path "dist\$exeName.exe")) { Write-Error "EXE CLI manquant"; exit 1 }

          # Force l’icône (filet de sécurité)
          $rc = "$env:RUNNER_TEMP\rcedit.exe"
          Invoke-WebRequest -Uri "https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe" -OutFile $rc -UseBasicParsing
          & $rc "dist\$exeName.exe" --set-icon $ico

      - name: Build Windows Standalone (GUI)
        shell: pwsh
        run: |
          $version = "${{ needs.build.outputs.version }}"; if ([string]::IsNullOrWhiteSpace($version)) { $version = "0.0.0" }
          $exeName = "IoCScanner_GUI_Windows_v$version"
          "WINDOWS_GUI_EXE=$exeName.exe" >> $env:GITHUB_ENV
          $ico = "${{ env.WIN_ICO }}"

          $args = @(
            "--noconfirm","--onefile","--clean","--noupx",
            "--windowed",
            "--name",$exeName,
            "--collect-all","tkinterdnd2",
            "--hidden-import","tkinterdnd2",
            "--icon",$ico,
            "--add-data",("$ico;.")
          )

          pyinstaller @args --version-file "build-res/file_version.txt" --manifest "build-res/app.manifest" entry_gui.py
          if (!(Test-Path "dist\$exeName.exe")) { Write-Error "EXE GUI manquant"; exit 1 }

          # Force l’icône (filet de sécurité)
          $rc = "$env:RUNNER_TEMP\rcedit.exe"
          Invoke-WebRequest -Uri "https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe" -OutFile $rc -UseBasicParsing
          & $rc "dist\$exeName.exe" --set-icon $ico

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-bin
          path: |
            dist/${{ env.WINDOWS_CLI_EXE }}
            dist/${{ env.WINDOWS_GUI_EXE }}
          if-no-files-found: error
          retention-days: 7

  Linux_Standalone_Build:
    if: ${{ needs.build.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install system deps (Tk) + PyInstaller
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && python -m pip install -r requirements.txt || true
          python -m pip install "pyinstaller>=6.0"
          pyinstaller --version
      - name: Create entrypoints (CLI & GUI)
        run: |
          cat > entry_cli.py << 'PY'
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          PY
          cat > entry_gui.py << 'PY'
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          PY
      - name: Build Linux Standalone (CLI)
        env: { VERSION: ${{ needs.build.outputs.version }} }
        run: |
          set -e
          version="${VERSION:-0.0.0}"
          exeName="IoCScanner_CLI_Linux_v${version}"
          echo "LINUX_CLI_BIN=${exeName}" >> $GITHUB_ENV
          pyinstaller --noconfirm --clean --noupx --onefile --console --name "$exeName" entry_cli.py
          [ -f "dist/$exeName" ]
      - name: Build Linux Standalone (GUI)
        env: { VERSION: ${{ needs.build.outputs.version }} }
        run: |
          set -e
          version="${VERSION:-0.0.0}"
          exeName="IoCScanner_GUI_Linux_v${version}"
          echo "LINUX_GUI_BIN=${exeName}" >> $GITHUB_ENV
          pyinstaller --noconfirm --clean --noupx --onefile --windowed --name "$exeName" entry_gui.py
          [ -f "dist/$exeName" ]
      - name: Archive Linux binaries
        run: |
          tar -C dist -czf dist/IoCScanner_Linux_binaries.tar.gz \
            "${LINUX_CLI_BIN}" "${LINUX_GUI_BIN}"
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: dist/IoCScanner_Linux_binaries.tar.gz
          if-no-files-found: error
          retention-days: 7

  macOS_Standalone_Build:
    if: ${{ needs.build.outputs.should_release == 'true' }}
    runs-on: macos-latest
    needs: [ build ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install Python deps (+ PyInstaller)
        run: |
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && python -m pip install -r requirements.txt || true
          python -m pip install "pyinstaller>=6.0"
          pyinstaller --version
      - name: Create entrypoints (CLI & GUI)
        run: |
          cat > entry_cli.py << 'PY'
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          PY
          cat > entry_gui.py << 'PY'
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          PY
      - name: Build macOS (CLI)
        env: { VERSION: ${{ needs.build.outputs.version }} }
        run: |
          set -e
          version="${VERSION:-0.0.0}"
          exeName="IoCScanner_CLI_macOS_v${version}"
          echo "MAC_CLI_BIN=${exeName}" >> $GITHUB_ENV
          pyinstaller --noconfirm --clean --noupx --onefile --console --name "$exeName" entry_cli.py
          [ -f "dist/$exeName" ]
      - name: Build macOS (GUI)
        env: { VERSION: ${{ needs.build.outputs.version }} }
        run: |
          set -e
          version="${VERSION:-0.0.0}"
          exeName="IoCScanner_GUI_macOS_v${version}"
          echo "MAC_GUI_BIN=${exeName}" >> $GITHUB_ENV
          pyinstaller --noconfirm --clean --noupx --onefile --windowed --name "$exeName" entry_gui.py
          [ -f "dist/$exeName" ]
      - name: Zip macOS binaries
        run: |
          cd dist && /usr/bin/zip -r IoCScanner_macOS_binaries.zip \
            "${MAC_CLI_BIN}" "${MAC_GUI_BIN}"
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: dist/IoCScanner_macOS_binaries.zip
          if-no-files-found: error
          retention-days: 7

  release:
    if: ${{ needs.build.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    needs: [ build, Windows_Standalone_Build, Linux_Standalone_Build, macOS_Standalone_Build ]
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with: { name: windows-bin, path: dist/ }
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with: { name: linux-bin, path: dist/ }
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with: { name: macos-app, path: dist/ }
      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: IoC-Scanner v${{ needs.build.outputs.version }}
          body: |
            Windows, Linux & macOS standalone builds.
            - Windows: onefile (CLI/GUI) avec manifest & version info + icône forcée
            - Linux: onefile (CLI/GUI)
            - macOS: onefile (CLI/GUI)
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ github.token }}
