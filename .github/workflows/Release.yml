name: CI & Release â€” IoC Scanner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.compare.outputs.greater }}
      version: ${{ steps.read.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Read version.txt
        id: read
        run: |
          set -e
          [ -f version.txt ] || { echo "version.txt manquant"; exit 1; }
          RAW=$(head -n1 version.txt | tr -d '\r' | xargs)
          VER=$(printf "%s" "$RAW" | sed -E 's/^[^0-9]*//')
          [ -n "$VER" ] || { echo "version.txt vide"; exit 1; }
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Get latest release tag
        id: latest
        env:
          TOKEN: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -e
          LATEST=$(curl -s -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // empty')
          [ -n "$LATEST" ] || LATEST="0.0.0"
          CLEAN=$(printf "%s" "$LATEST" | sed -E 's/^[^0-9]*//')
          echo "latest=$CLEAN" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare
        run: |
          echo "NEW=${{ steps.read.outputs.version }} ; LATEST=${{ steps.latest.outputs.latest }}"
          if dpkg --compare-versions "${{ steps.read.outputs.version }}" gt "${{ steps.latest.outputs.latest }}"; then
            echo "greater=true" >> $GITHUB_OUTPUT
          else
            echo "greater=false" >> $GITHUB_OUTPUT
          fi

      - name: Compute tag
        id: tag
        run: |
          echo "tag=v${{ steps.read.outputs.version }}" >> $GITHUB_OUTPUT

  tests:
    name: tests (python 3.13)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip pytest
          [ -f requirements.txt ] && python -m pip install -r requirements.txt || true
      - name: Run pytest
        run: |
          python -m pytest -q || echo "No tests"

  build_pkg:
    name: build sdist+wheel
    runs-on: ubuntu-latest
    needs: [prepare, tests]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Build package (PEP 517)
        run: |
          python -m pip install --upgrade pip build
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            python -m build
          else
            mkdir -p dist && echo "no-package" > dist/NO_PYPROJECT
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  build_binaries_windows:
    name: build binaries (Windows)
    runs-on: windows-latest
    needs: [prepare, tests]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyInstaller
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Create entrypoints (CLI & GUI)
        shell: pwsh
        run: |
          Set-Content entry_cli.py @"
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          "@
                    Set-Content entry_gui.py @"
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          "@

      - name: Build (CLI console)
        shell: pwsh
        run: pyinstaller --noconfirm --onefile --console  --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        shell: pwsh
        run: pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            dist/IoCScanner-CLI.exe
            dist/IoCScanner-GUI.exe


  build_binaries_linux:
    name: build binaries (Linux)
    runs-on: ubuntu-latest
    needs: [prepare, tests]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system deps (Tk) & PyInstaller
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk
          python -m pip install --upgrade pip pyinstaller

      - name: Create entrypoints (CLI & GUI)
        run: |
          cat > entry_cli.py << 'PY'
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          PY
                    cat > entry_gui.py << 'PY'
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          PY

      - name: Build (CLI console)
        run: pyinstaller --noconfirm --onefile --console  --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        run: pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - name: Tarball Linux binaries
        run: tar -C dist -czf dist/IoCScanner-linux.tar.gz IoCScanner-CLI IoCScanner-GUI

      - uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: dist/IoCScanner-linux.tar.gz


  build_binaries_macos:
    name: build binaries (macOS)
    runs-on: macos-latest
    needs: [prepare, tests]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install PyInstaller
        run: |
          python -m pip install --upgrade pip pyinstaller

      - name: Create entrypoints (CLI & GUI)
        run: |
          cat > entry_cli.py << 'PY'
          from scanner.cli import main
          if __name__ == "__main__":
              main()
          PY
                    cat > entry_gui.py << 'PY'
          from scanner.gui import launch_gui
          if __name__ == "__main__":
              launch_gui()
          PY

      - name: Build (CLI console)
        run: pyinstaller --noconfirm --onefile --console  --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        run: pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - name: Zip macOS binaries
        run: |
          cd dist && zip -r IoCScanner-macos.zip IoCScanner-CLI IoCScanner-GUI

      - uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: dist/IoCScanner-macos.zip


  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build_pkg, build_binaries_windows, build_binaries_linux, build_binaries_macos]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist/ }
      - uses: actions/download-artifact@v4
        with: { name: windows-binaries, path: dist/ }
      - uses: actions/download-artifact@v4
        with: { name: linux-binaries, path: dist/ }
      - uses: actions/download-artifact@v4
        with: { name: macos-binaries, path: dist/ }
      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: IoC Scanner v${{ needs.prepare.outputs.version }}
          generate_release_notes: true
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}

