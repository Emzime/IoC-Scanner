name: CI & Release — IoC-Scanner

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  tests:
    name: tests (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          # Installe le projet si un pyproject / setup.cfg est présent (facultatif)
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            python -m pip install -e .
          fi

      - name: Run pytest
        run: |
          # Ne fait pas échouer si aucun test
          python -m pytest -q || echo "Aucun test — étape non bloquante."

  build-pkg:
    name: build sdist+wheel
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build package (PEP 517)
        run: |
          python -m pip install --upgrade pip build
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            python -m build
          else
            mkdir -p dist && echo "package-missing" > dist/NO_PYPROJECT
          fi

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  build-binaries-windows:
    name: build binaries (Windows)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install PyInstaller
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Create entry wrappers (no if-main)
        shell: pwsh
        run: |
          Remove-Item -Force -ErrorAction Ignore entry_cli.py, entry_gui.py
          Add-Content entry_cli.py 'from scanner.cli import main'
          Add-Content entry_cli.py 'main()'
          Add-Content entry_gui.py 'from scanner.gui import launch_gui'
          Add-Content entry_gui.py 'launch_gui()'

      - name: Build (CLI console)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --onefile --console --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            dist/IoCScanner-CLI.exe
            dist/IoCScanner-GUI.exe

  build-binaries-linux:
    name: build binaries (Linux)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install system deps (Tk for GUI)
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk

      - name: Install PyInstaller
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Create entry wrappers (no if-main)
        run: |
          printf "from scanner.cli import main\nmain()\n" > entry_cli.py
          printf "from scanner.gui import launch_gui\nlaunch_gui()\n" > entry_gui.py

      - name: Build (CLI console)
        run: |
          pyinstaller --noconfirm --onefile --console --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        run: |
          pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - name: Tarball Linux binaries
        run: |
          tar -C dist -czf dist/IoCScanner-linux.tar.gz IoCScanner-CLI IoCScanner-GUI

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            dist/IoCScanner-linux.tar.gz

  build-binaries-macos:
    name: build binaries (macOS)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install PyInstaller
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Create entry wrappers (no if-main)
        run: |
          printf "from scanner.cli import main\nmain()\n" > entry_cli.py
          printf "from scanner.gui import launch_gui\nlaunch_gui()\n" > entry_gui.py

      - name: Build (CLI console)
        run: |
          pyinstaller --noconfirm --onefile --console --name IoCScanner-CLI entry_cli.py

      - name: Build (GUI windowed)
        run: |
          pyinstaller --noconfirm --onefile --windowed --name IoCScanner-GUI entry_gui.py

      - name: Zip macOS binaries
        run: |
          cd dist && zip -r IoCScanner-macos.zip IoCScanner-CLI IoCScanner-GUI

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            dist/IoCScanner-macos.zip

  github-release:
    name: GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-pkg, build-binaries-windows, build-binaries-linux, build-binaries-macos]
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Download windows binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: dist/

      - name: Download linux binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: dist/

      - name: Download macOS binaries
        uses: actions/download-artifact@v4
        with:
          name: macos-binaries
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: IoC-Scanner ${{ github.ref_name }}
          files: |
            dist/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}